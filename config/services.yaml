# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.solr.host: '%env(APP_SOLR_HOST)%'
    app.user.picture.path: '%env(USER_PICTURE_PATH)%'
    app.files.path: '%env(FILES_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\OpenApi\OpenApiFactory:
        decorates: 'api_platform.openapi.factory'
        arguments: ['@App\OpenApi\OpenApiFactory.inner']
        autoconfigure: false

    AppCustomJWTAuthenticator:
        class: App\Security\AppCustomJWTAuthenticator
        parent: lexik_jwt_authentication.security.jwt_authenticator

    App\Service\Solarium\Client:
        arguments: ['@solarium.adapter.default']
        parent: solarium.client.default


    'App\Serializer\Normalizer\ApiCollectionNormalizer':
        decorates: 'api_platform.hydra.normalizer.collection'
        arguments: [ '@App\Serializer\Normalizer\ApiCollectionNormalizer.inner' ]

    'App\Serializer\Normalizer\ApiItemNormalizer': # JSON-LD format
        decorates: 'api_platform.jsonld.normalizer.item'

#    'app.serializer.normalizer.item.json': #JSONformat
#        class: 'App\Serializer\Normalizer\ApiItemNormalizer'
#        decorates: 'api_platform.serializer.normalizer.item'

