security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    #Une nouvelle sécurité expérimentale a été introduite dans Symfony 5.1,
    #qui remplacera à terme la sécurité dans Symfony 6.0.
    #Ce système est presque entièrement rétrocompatible avec la sécurité Symfony actuelle
    providers:
        #fournisseur d'utilisateurs

        user:
            entity:
                class: App\Entity\User
                property: username

        jwt:
            lexik_jwt:
                class: App\Entity\User


    role_hierarchy: # ROLE_MEMBER: already has a profil in journal (ROLE_USER : not)
        ROLE_GUEST: ~
        ROLE_USER: ROLE_GUEST
        ROLE_MEMBER: ROLE_USER
        ROLE_AUTHOR: ROLE_MEMBER
        ROLE_REVIEWER: ROLE_MEMBER
        ROLE_COPY_EDITOR: ROLE_MEMBER
        ROLE_WEBMASTER: ROLE_MEMBER
        ROLE_GUEST_EDITOR: ROLE_MEMBER
        ROLE_EDITOR: ROLE_GUEST_EDITOR
        ROLE_SECRETARY: [ROLE_EDITOR, ROLE_WEBMASTER]
        ROLE_ADMINISTRATOR: ROLE_SECRETARY
        ROLE_CHIEF_EDITOR: ROLE_ADMINISTRATOR
        ROLE_EPIADMIN: ROLE_CHIEF_EDITOR
    password_hashers:
        # auto hasher with custom options for all PasswordAuthenticatedUserInterface instances
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm:  'auto'
            cost: 13

    firewalls:

        #faux pare-feu: il garantit que vous ne bloquez pas accidentellement les outils de développement de Symfony
        #- qui vivent sous des URL comme /_profileret /_wdt.
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        #Caution!
        #Make sure the firewall login is place before api, and if main exists, put it after api, otherwise you will encounter /api/login_check route not found.

        #Pour la route du login,
        #on indique que le bundle lexik jwt authentication doit s’occuper
        #de gérer la vérification des informations utilisateurs avec ses propres méthodes
        login:
            # Le pare-feu interceptera toutes les demandes ( POST demandes uniquement, par défaut) adressées
            # à cette URL et traitera les informations de connexion soumises
            pattern: ^/api/login$
            stateless: true
            provider: user
            json_login:
                check_path: api_login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure



        #Pour le reste de notre api - tout est stateless,
        #chaque requête doit contenir des informations d'authentification,
        #toutes les routes qui commencent par api seront protégées par l’authenticator JWT Lexik
        api:
            pattern: ^/api
            stateless: true
            provider: jwt
            jwt:
                authenticator: AppCustomJWTAuthenticator
            entry_point: jwt
            refresh_jwt:
                check_path: /api/token/refresh
                provider: user


#        main:
#            lazy: true
#            logout: ~
#
#            # if you want, disable storing the user in the session
#            stateless: true
#           custom_authenticator: App\Security\TokenAuthenticator


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/,       roles: PUBLIC_ACCESS  }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }


